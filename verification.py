import numpy as np
import sympy 

decomposition_444 = (np.array([[ 0.5+0.5j,  0.5+0.5j,  0. +0.j ,  0. -0.5j,  0.5+0.5j,  0. +0.j ,
         0. +0.5j,  0.5+0.5j,  0. -0.5j, -0.5+0.5j, -0.5+0.5j,  0.5+0.j ,
         0. +0.j , -0. +0.j ,  0. +0.5j,  0. +0.j , -0.5+0.j ,  0.5+0.5j,
         0. +0.5j,  0. -0.j ,  0. +0.j ,  0. +0.5j, -0.5-0.5j, -0. +0.j ,
        -0.5+0.j ,  0. +0.j ,  0. +0.j ,  0. -0.5j, -0.5+0.5j,  0.5+0.5j,
        -0. +0.j ,  0.5+0.j , -0. +0.j ,  0.5+0.j ,  0. -0.5j,  0. +0.j ,
        -0. +0.j ,  0.5+0.j ,  0. +0.j , -0.5+0.j , -0.5-0.5j,  0.5-0.5j,
         0.5+0.5j,  0. +0.5j,  0. -0.j , -0.5+0.5j,  0.5-0.5j,  0.5+0.j ],
       [ 0.5+0.5j,  0. +0.j , -0.5+0.j , -0.5+0.j , -0.5-0.5j,  0. +0.j ,
         0. +0.j , -0.5-0.5j,  0. -0.5j,  0. -0.j ,  0.5-0.5j,  0.5+0.j ,
         0.5+0.5j,  0.5-0.5j, -0.5+0.j ,  0. +0.j , -0. +0.5j,  0.5+0.5j,
        -0. +0.5j,  0. +0.j ,  0.5+0.5j,  0. -0.5j,  0. +0.j ,  0. +0.j ,
         0.5+0.j , -0. +0.j ,  0.5+0.5j,  0. -0.5j, -0.5+0.5j, -0. +0.j ,
         0.5+0.5j, -0.5+0.j ,  0. +0.j , -0. +0.5j,  0. +0.5j, -0. +0.j ,
        -0.5-0.5j,  0. -0.5j,  0.5-0.5j,  0. -0.5j, -0.5-0.5j,  0. -0.j ,
         0. -0.j ,  0.5+0.j ,  0. +0.j ,  0.5-0.5j,  0. +0.j , -0. +0.5j],
       [ 0. +0.j ,  0. +0.j ,  0.5+0.j ,  0.5+0.j ,  0. +0.j ,  0.5-0.5j,
         0. +0.j ,  0. +0.j , -0.5-0.j ,  0. +0.j ,  0. -0.j ,  0. -0.5j,
        -0.5-0.5j, -0.5+0.5j,  0.5+0.j , -0.5+0.5j,  0. +0.5j,  0. +0.j ,
        -0.5+0.j ,  0.5-0.5j, -0.5-0.5j, -0.5-0.j ,  0. -0.j , -0.5-0.5j,
         0. -0.5j,  0.5-0.5j,  0.5+0.5j,  0.5+0.j ,  0. -0.j ,  0. +0.j ,
         0.5+0.5j,  0. -0.5j,  0.5+0.5j,  0. -0.5j, -0.5+0.j ,  0.5-0.5j,
        -0.5-0.5j,  0. -0.5j,  0.5-0.5j,  0. -0.5j,  0. +0.j ,  0. +0.j ,
        -0. +0.j , -0.5-0.j ,  0.5-0.5j,  0. -0.j ,  0. +0.j , -0. +0.5j],
       [ 0. +0.j , -0.5+0.5j,  0. +0.j , -0.5-0.j ,  0. -0.j , -0.5-0.5j,
         0.5+0.j ,  0. +0.j ,  0. -0.5j, -0.5-0.5j,  0. +0.j , -0.5+0.j ,
         0. +0.j , -0. +0.j , -0.5+0.j ,  0.5+0.5j,  0. -0.5j,  0. +0.j ,
        -0. +0.5j,  0.5+0.5j,  0. +0.j ,  0. -0.5j, -0.5+0.5j,  0.5-0.5j,
        -0.5-0.j ,  0.5+0.5j,  0. +0.j , -0. +0.5j,  0. +0.j ,  0.5-0.5j,
         0. -0.j ,  0.5+0.j ,  0.5-0.5j,  0. -0.5j,  0. +0.5j,  0.5+0.5j,
         0. +0.j ,  0. -0.5j,  0. +0.j ,  0. -0.5j,  0. +0.j , -0.5-0.5j,
        -0.5+0.5j, -0.5-0.j , -0.5-0.5j,  0. +0.j ,  0.5+0.5j,  0. -0.5j],
       [ 0.5-0.5j,  0.5+0.5j, -0. +0.j , -0. +0.5j, -0.5+0.5j,  0. +0.j ,
        -0.5+0.j , -0.5-0.5j,  0.5+0.j ,  0.5+0.5j, -0.5+0.5j, -0.5-0.j ,
        -0. +0.j ,  0. -0.j ,  0.5+0.j ,  0. -0.j , -0.5-0.j ,  0.5+0.5j,
        -0. +0.5j,  0. -0.j ,  0. +0.j ,  0. -0.5j,  0.5-0.5j,  0. -0.j ,
         0. -0.5j,  0. +0.j ,  0. +0.j , -0.5+0.j , -0.5-0.5j, -0.5-0.5j,
        -0. +0.j ,  0.5+0.j ,  0. -0.j , -0.5+0.j , -0.5-0.j ,  0. -0.j ,
        -0. +0.j , -0. +0.5j, -0. +0.j , -0.5+0.j ,  0.5+0.5j, -0.5+0.5j,
         0.5-0.5j,  0.5+0.j , -0. +0.j ,  0.5+0.5j,  0.5-0.5j, -0. +0.5j],
       [ 0.5-0.5j, -0. +0.j ,  0. -0.5j, -0.5+0.j ,  0.5-0.5j,  0. +0.j ,
         0. -0.j ,  0.5+0.5j,  0.5+0.j ,  0. +0.j ,  0.5-0.5j, -0.5-0.j ,
        -0.5+0.5j,  0.5-0.5j,  0. -0.5j,  0. -0.j ,  0. -0.5j,  0.5+0.5j,
        -0. +0.5j,  0. +0.j ,  0.5+0.5j,  0. +0.5j,  0. +0.j ,  0. -0.j ,
        -0. +0.5j,  0. +0.j , -0.5-0.5j, -0.5+0.j , -0.5-0.5j, -0. +0.j ,
        -0.5-0.5j, -0.5+0.j ,  0. +0.j , -0. +0.5j,  0.5+0.j ,  0. +0.j ,
        -0.5+0.5j, -0.5+0.j , -0.5-0.5j,  0. +0.5j,  0.5+0.5j,  0. -0.j ,
         0. +0.j ,  0. +0.5j,  0. +0.j , -0.5-0.5j,  0. -0.j ,  0.5+0.j ],
       [ 0. -0.j , -0. +0.j , -0. +0.5j,  0.5+0.j ,  0. +0.j ,  0.5-0.5j,
         0. -0.j , -0. +0.j ,  0. -0.5j,  0. -0.j ,  0. -0.j ,  0. +0.5j,
         0.5-0.5j, -0.5+0.5j, -0. +0.5j,  0.5-0.5j,  0. -0.5j,  0. +0.j ,
        -0.5+0.j ,  0.5-0.5j, -0.5-0.5j,  0.5+0.j ,  0. +0.j ,  0.5-0.5j,
         0.5+0.j , -0.5-0.5j, -0.5-0.5j,  0. -0.5j,  0. -0.j ,  0. +0.j ,
        -0.5-0.5j,  0. -0.5j, -0.5+0.5j,  0. -0.5j, -0. +0.5j, -0.5+0.5j,
        -0.5+0.5j, -0.5+0.j , -0.5-0.5j, -0. +0.5j,  0. -0.j ,  0. +0.j ,
         0. -0.j ,  0. -0.5j, -0.5-0.5j, -0. +0.j , -0. +0.j ,  0.5+0.j ],
       [ 0. +0.j , -0.5+0.5j,  0. +0.j ,  0.5+0.j ,  0. +0.j , -0.5-0.5j,
         0. +0.5j,  0. -0.j ,  0.5+0.j , -0.5+0.5j,  0. +0.j ,  0.5+0.j ,
         0. +0.j ,  0. -0.j , -0. +0.5j, -0.5-0.5j,  0. -0.5j,  0. -0.j ,
         0. +0.5j,  0.5+0.5j,  0. -0.j ,  0. +0.5j, -0.5-0.5j,  0.5+0.5j,
         0. -0.5j,  0.5-0.5j,  0. +0.j ,  0.5+0.j ,  0. +0.j , -0.5+0.5j,
         0. +0.j ,  0.5+0.j ,  0.5+0.5j,  0. +0.5j,  0.5+0.j , -0.5-0.5j,
        -0. +0.j ,  0.5+0.j ,  0. +0.j ,  0. -0.5j,  0. +0.j ,  0.5+0.5j,
         0.5+0.5j, -0. +0.5j, -0.5+0.5j,  0. +0.j ,  0.5+0.5j,  0.5+0.j ],
       [ 0.5-0.5j, -0.5-0.5j,  0. -0.j ,  0. -0.5j, -0.5+0.5j,  0. +0.j ,
         0.5+0.j , -0.5-0.5j, -0.5-0.j , -0.5-0.5j,  0.5-0.5j,  0.5+0.j ,
        -0. +0.j , -0. +0.j ,  0.5+0.j , -0. +0.j , -0.5-0.j ,  0.5+0.5j,
        -0. +0.5j,  0. +0.j ,  0. -0.j ,  0. -0.5j,  0.5-0.5j,  0. +0.j ,
         0. -0.5j,  0. +0.j ,  0. +0.j , -0.5-0.j ,  0.5+0.5j,  0.5+0.5j,
         0. +0.j , -0.5+0.j ,  0. -0.j , -0.5-0.j ,  0.5+0.j ,  0. -0.j ,
         0. +0.j , -0. +0.5j,  0. +0.j ,  0.5+0.j , -0.5-0.5j, -0.5+0.5j,
         0.5-0.5j, -0.5-0.j ,  0. -0.j , -0.5-0.5j,  0.5-0.5j,  0. -0.5j],
       [ 0.5-0.5j, -0. +0.j ,  0. +0.5j, -0.5+0.j ,  0.5-0.5j,  0. +0.j ,
         0. +0.j ,  0.5+0.5j, -0.5-0.j ,  0. +0.j , -0.5+0.5j,  0.5+0.j ,
        -0.5+0.5j,  0.5-0.5j, -0. +0.5j,  0. +0.j , -0. +0.5j,  0.5+0.5j,
        -0. +0.5j,  0. -0.j , -0.5-0.5j,  0. +0.5j,  0. +0.j ,  0. +0.j ,
         0. +0.5j,  0. +0.j ,  0.5+0.5j, -0.5-0.j ,  0.5+0.5j, -0. +0.j ,
        -0.5-0.5j,  0.5+0.j ,  0. +0.j ,  0. -0.5j, -0.5-0.j ,  0. +0.j ,
         0.5-0.5j,  0.5+0.j , -0.5-0.5j, -0. +0.5j, -0.5-0.5j,  0. +0.j ,
         0. -0.j , -0. +0.5j, -0. +0.j ,  0.5+0.5j,  0. +0.j ,  0.5+0.j ],
       [ 0. +0.j , -0. +0.j ,  0. -0.5j,  0.5+0.j ,  0. -0.j , -0.5+0.5j,
        -0. +0.j ,  0. +0.j ,  0. -0.5j,  0. +0.j ,  0. -0.j ,  0. +0.5j,
         0.5-0.5j, -0.5+0.5j,  0. -0.5j,  0.5-0.5j, -0. +0.5j, -0. +0.j ,
         0.5+0.j ,  0.5-0.5j,  0.5+0.5j, -0.5+0.j ,  0. +0.j ,  0.5-0.5j,
        -0.5+0.j ,  0.5+0.5j,  0.5+0.5j, -0. +0.5j,  0. +0.j ,  0. +0.j ,
        -0.5-0.5j,  0. -0.5j,  0.5-0.5j,  0. +0.5j,  0. +0.5j,  0.5-0.5j,
         0.5-0.5j,  0.5+0.j , -0.5-0.5j, -0. +0.5j,  0. +0.j ,  0. -0.j ,
         0. -0.j ,  0. -0.5j, -0.5-0.5j, -0. +0.j , -0. +0.j ,  0.5+0.j ],
       [-0. +0.j ,  0.5-0.5j,  0. +0.j , -0.5-0.j , -0. +0.j ,  0.5+0.5j,
         0. -0.5j,  0. +0.j ,  0.5+0.j ,  0.5-0.5j,  0. +0.j ,  0.5+0.j ,
        -0. +0.j , -0. +0.j , -0. +0.5j, -0.5-0.5j,  0. -0.5j,  0. +0.j ,
         0. -0.5j,  0.5+0.5j,  0. -0.j ,  0. -0.5j, -0.5-0.5j,  0.5+0.5j,
         0. +0.5j, -0.5+0.5j,  0. +0.j , -0.5-0.j ,  0. +0.j ,  0.5-0.5j,
         0. +0.j ,  0.5+0.j , -0.5-0.5j,  0. +0.5j,  0.5+0.j ,  0.5+0.5j,
        -0. +0.j ,  0.5+0.j ,  0. -0.j ,  0. +0.5j,  0. +0.j ,  0.5+0.5j,
         0.5+0.5j,  0. -0.5j, -0.5+0.5j,  0. +0.j ,  0.5+0.5j, -0.5+0.j ],
       [ 0.5-0.5j,  0.5-0.5j, -0. +0.j , -0.5-0.j ,  0.5-0.5j, -0. +0.j ,
        -0.5+0.j , -0.5+0.5j,  0.5+0.j , -0.5-0.5j,  0.5+0.5j,  0. -0.5j,
         0. +0.j , -0. +0.j ,  0.5+0.j ,  0. +0.j ,  0. -0.5j, -0.5+0.5j,
        -0.5+0.j , -0. +0.j ,  0. -0.j , -0.5-0.j , -0.5+0.5j,  0. -0.j ,
        -0. +0.5j,  0. +0.j ,  0. +0.j , -0.5+0.j , -0.5-0.5j,  0.5-0.5j,
         0. +0.j ,  0. -0.5j,  0. +0.j ,  0. +0.5j,  0.5+0.j , -0. +0.j ,
         0. +0.j ,  0. -0.5j, -0. +0.j , -0. +0.5j, -0.5+0.5j,  0.5+0.5j,
         0.5-0.5j, -0.5+0.j ,  0. +0.j , -0.5-0.5j,  0.5+0.5j,  0. +0.5j],
       [ 0.5-0.5j, -0. +0.j ,  0. -0.5j,  0. -0.5j, -0.5+0.5j,  0. -0.j ,
         0. -0.j ,  0.5-0.5j,  0.5+0.j ,  0. -0.j , -0.5-0.5j,  0. -0.5j,
         0.5-0.5j,  0.5+0.5j,  0. -0.5j,  0. +0.j ,  0.5+0.j , -0.5+0.5j,
        -0.5+0.j ,  0. +0.j ,  0.5-0.5j,  0.5+0.j , -0. +0.j , -0. +0.j ,
         0. -0.5j,  0. +0.j ,  0.5-0.5j, -0.5+0.j , -0.5-0.5j, -0. +0.j ,
        -0.5+0.5j, -0. +0.5j,  0. -0.j ,  0.5+0.j , -0.5+0.j ,  0. +0.j ,
         0.5-0.5j,  0.5+0.j , -0.5-0.5j,  0.5+0.j , -0.5+0.5j,  0. +0.j ,
         0. +0.j ,  0. -0.5j, -0. +0.j ,  0.5+0.5j,  0. +0.j ,  0.5+0.j ],
       [ 0. +0.j ,  0. +0.j , -0. +0.5j, -0. +0.5j,  0. +0.j , -0.5-0.5j,
         0. -0.j ,  0. -0.j ,  0. +0.5j,  0. +0.j ,  0. +0.j ,  0.5+0.j ,
        -0.5+0.5j, -0.5-0.5j, -0. +0.5j, -0.5-0.5j,  0.5+0.j ,  0. -0.j ,
        -0. +0.5j,  0.5+0.5j, -0.5+0.5j, -0. +0.5j,  0. +0.j , -0.5+0.5j,
         0.5+0.j ,  0.5+0.5j,  0.5-0.5j,  0. +0.5j, -0. +0.j ,  0. +0.j ,
        -0.5+0.5j,  0.5+0.j , -0.5+0.5j, -0.5+0.j ,  0. +0.5j, -0.5-0.5j,
         0.5-0.5j,  0.5+0.j , -0.5-0.5j,  0.5+0.j ,  0. +0.j ,  0. +0.j ,
         0. -0.j , -0. +0.5j, -0.5-0.5j, -0. +0.j ,  0. +0.j ,  0.5+0.j ],
       [-0. +0.j ,  0.5+0.5j,  0. -0.j , -0. +0.5j,  0. +0.j , -0.5+0.5j,
         0. +0.5j,  0. +0.j , -0.5+0.j ,  0.5-0.5j,  0. +0.j ,  0. -0.5j,
        -0. +0.j ,  0. +0.j , -0. +0.5j, -0.5+0.5j,  0.5+0.j ,  0. +0.j ,
         0.5+0.j , -0.5+0.5j, -0. +0.j , -0.5+0.j ,  0.5+0.5j, -0.5-0.5j,
         0. -0.5j, -0.5+0.5j,  0. -0.j , -0.5-0.j ,  0. +0.j , -0.5-0.5j,
        -0. +0.j , -0. +0.5j,  0.5+0.5j,  0.5+0.j ,  0.5+0.j ,  0.5-0.5j,
         0. -0.j , -0.5-0.j ,  0. +0.j , -0.5-0.j ,  0. -0.j ,  0.5-0.5j,
         0.5+0.5j,  0. -0.5j, -0.5+0.5j,  0. +0.j , -0.5+0.5j,  0.5+0.j ]],
      dtype=np.complex64), np.array([[-0.5-0.j , -0. +0.j ,  0. -0.j ,  0. -0.5j, -0.5-0.j ,  0. +0.j ,
         0. +0.j , -0.5-0.j ,  0.5+0.j , -0. +0.j ,  0. -0.j ,  0. -0.5j,
        -0.5+0.j , -0. +0.5j,  0. +0.j , -0. +0.5j,  0. +0.j ,  0. -0.5j,
         0. -0.j ,  0. -0.5j,  0. +0.j , -0. +0.j ,  0. -0.5j, -0.5-0.j ,
         0. -0.j , -0. +0.j ,  0. +0.j , -0. +0.j ,  0. -0.j ,  0. +0.j ,
        -0.5+0.j ,  0.5+0.j ,  0. +0.j , -0. +0.j ,  0. +0.5j,  0. -0.j ,
         0. -0.j , -0. +0.j , -0. +0.5j,  0. -0.5j,  0. +0.j ,  0.5+0.j ,
        -0. +0.5j,  0.5+0.j ,  0. -0.5j,  0. +0.j , -0.5+0.j ,  0.5+0.j ],
       [ 0. +0.j , -0. +0.5j,  0.5+0.5j,  0. -0.j , -0. +0.j ,  0.5+0.j ,
        -0.5-0.5j,  0. -0.j ,  0. +0.j ,  0. +0.5j, -0. +0.5j,  0. -0.j ,
         0. -0.j ,  0. +0.j , -0.5+0.j ,  0. -0.j ,  0.5+0.j ,  0. -0.j ,
         0. -0.5j,  0. +0.j ,  0. -0.5j, -0.5+0.j ,  0. -0.j , -0. +0.j ,
         0. +0.5j,  0. +0.5j,  0.5+0.j , -0. +0.5j,  0.5+0.j ,  0. +0.5j,
         0. -0.j ,  0. -0.j , -0. +0.5j, -0.5-0.j ,  0. +0.j ,  0. -0.5j,
        -0.5-0.j ,  0. +0.5j,  0. +0.j ,  0. +0.j ,  0. +0.5j,  0. +0.j ,
         0. -0.j ,  0. +0.j ,  0. +0.j ,  0. -0.5j,  0. -0.j , -0. +0.j ],
       [ 0. -0.j ,  0. -0.j ,  0. -0.j ,  0. +0.5j,  0.5+0.j , -0. +0.j ,
         0. +0.j ,  0. -0.j , -0.5+0.j ,  0. +0.5j,  0. +0.j ,  0. -0.j ,
         0.5+0.j ,  0. -0.5j,  0. +0.j , -0. +0.j ,  0.5+0.j , -0. +0.5j,
        -0. +0.j ,  0. +0.5j,  0. +0.j , -0.5+0.j , -0. +0.5j,  0.5+0.j ,
         0. +0.j ,  0. +0.5j,  0.5+0.j , -0. +0.5j,  0. -0.j ,  0. +0.5j,
         0. -0.j , -0.5-0.j ,  0. -0.j ,  0. +0.j ,  0. +0.j ,  0. -0.5j,
        -0.5+0.j , -0. +0.5j, -0. +0.j ,  0. -0.j ,  0. +0.5j,  0. +0.j ,
        -0. +0.j , -0.5-0.j ,  0. -0.j ,  0. -0.5j,  0.5+0.j ,  0. +0.j ],
       [ 0. -0.j , -0. +0.5j,  0. -0.j ,  0. +0.j ,  0.5+0.j ,  0.5+0.j ,
         0. +0.j ,  0.5+0.j , -0.5+0.j ,  0. +0.5j,  0. +0.5j, -0. +0.5j,
         0.5+0.j , -0. +0.j ,  0. +0.j ,  0. -0.5j,  0. -0.j ,  0. -0.j ,
         0. -0.5j,  0. +0.j ,  0. -0.5j,  0. +0.j ,  0. +0.5j,  0.5+0.j ,
         0. +0.j ,  0. +0.5j,  0. -0.j ,  0. +0.5j,  0. -0.j ,  0. -0.j ,
         0.5+0.j ,  0. +0.j ,  0. +0.j , -0.5+0.j ,  0. +0.j ,  0. +0.j ,
        -0.5+0.j ,  0. +0.5j,  0. +0.j ,  0. +0.5j,  0. -0.j , -0.5-0.j ,
         0. +0.j , -0.5-0.j ,  0. -0.j ,  0. -0.5j, -0. +0.j ,  0. +0.j ],
       [-0.5-0.j ,  0. +0.j ,  0. +0.j ,  0. +0.j ,  0.5+0.j ,  0. +0.j ,
         0. -0.j ,  0.5+0.j ,  0.5+0.j ,  0. +0.j ,  0. +0.j ,  0. -0.5j,
        -0.5+0.j ,  0. -0.5j, -0.5+0.j , -0. +0.5j,  0.5+0.j ,  0. -0.5j,
         0. +0.j , -0. +0.5j,  0. +0.j ,  0. +0.j ,  0. -0.5j, -0.5-0.j ,
         0. +0.j , -0. +0.j , -0. +0.j , -0. +0.j ,  0. -0.j ,  0. +0.j ,
        -0.5+0.j , -0.5-0.j , -0. +0.j ,  0.5+0.j ,  0. -0.5j, -0. +0.j ,
        -0. +0.j ,  0. -0.5j,  0. -0.5j,  0. +0.j ,  0. -0.j ,  0.5+0.j ,
         0. -0.5j, -0. +0.j , -0. +0.5j,  0. +0.j ,  0.5+0.j ,  0. -0.j ],
       [ 0. +0.j , -0. +0.5j, -0.5-0.5j,  0. -0.5j,  0. +0.j ,  0.5+0.j ,
         0.5+0.5j,  0. +0.j ,  0. +0.j ,  0. +0.5j,  0. -0.5j, -0. +0.j ,
        -0. +0.j ,  0. -0.j ,  0. +0.j , -0. +0.j ,  0. +0.j , -0. +0.j ,
         0. -0.5j,  0. +0.j ,  0. -0.5j,  0.5+0.j ,  0. +0.j , -0. +0.j ,
         0. -0.5j, -0. +0.5j, -0.5-0.j ,  0. +0.5j,  0.5+0.j ,  0. -0.5j,
         0. -0.j ,  0. -0.j ,  0. -0.5j,  0. +0.j ,  0. +0.j ,  0. +0.5j,
        -0.5+0.j ,  0. +0.j ,  0. +0.j , -0. +0.5j,  0. +0.5j,  0. +0.j ,
         0. +0.j , -0.5-0.j ,  0. -0.j , -0. +0.5j, -0. +0.j ,  0.5+0.j ],
       [-0. +0.j ,  0. +0.j ,  0. +0.j ,  0. -0.5j, -0.5+0.j , -0. +0.j ,
         0. -0.j ,  0. +0.j , -0.5+0.j , -0. +0.5j,  0. +0.j ,  0. -0.j ,
         0.5+0.j , -0. +0.5j,  0. -0.j , -0. +0.j , -0.5-0.j , -0. +0.5j,
         0. +0.j ,  0. -0.5j,  0. +0.j ,  0.5+0.j ,  0. +0.5j,  0.5+0.j ,
         0. +0.j ,  0. +0.5j, -0.5-0.j , -0. +0.5j,  0. -0.j ,  0. -0.5j,
        -0. +0.j ,  0.5+0.j ,  0. +0.j ,  0. +0.j ,  0. -0.j ,  0. +0.5j,
        -0.5+0.j , -0. +0.5j,  0. +0.j ,  0. +0.j ,  0. +0.5j,  0. +0.j ,
         0. -0.j , -0.5-0.j , -0. +0.j ,  0. +0.5j, -0.5+0.j , -0. +0.j ],
       [ 0. -0.j ,  0. +0.5j,  0. +0.j , -0. +0.j , -0.5+0.j ,  0.5+0.j ,
         0. -0.j , -0.5-0.j , -0.5+0.j ,  0. +0.5j,  0. -0.5j, -0. +0.5j,
         0.5+0.j ,  0. -0.j , -0. +0.j ,  0. -0.5j,  0. +0.j ,  0. -0.j ,
         0. -0.5j, -0. +0.j ,  0. -0.5j,  0. -0.j ,  0. +0.5j,  0.5+0.j ,
         0. +0.j , -0. +0.5j,  0. +0.j ,  0. +0.5j,  0. -0.j , -0. +0.j ,
         0.5+0.j ,  0. -0.j , -0. +0.j , -0.5+0.j ,  0. +0.j ,  0. -0.j ,
        -0.5+0.j ,  0. +0.5j,  0. +0.j ,  0. +0.5j,  0. -0.j , -0.5+0.j ,
         0. -0.j , -0.5-0.j ,  0. +0.j ,  0. +0.5j,  0. +0.j , -0. +0.j ],
       [ 0.5+0.j ,  0. +0.j ,  0. -0.j , -0. +0.j ,  0.5+0.j ,  0. +0.j ,
         0. -0.j , -0.5-0.j , -0. +0.j ,  0. -0.j ,  0. -0.j , -0. +0.j ,
         0.5+0.j , -0. +0.5j,  0.5+0.j ,  0. -0.5j,  0.5+0.j ,  0. -0.5j,
         0. -0.5j,  0. +0.5j, -0. +0.j , -0.5-0.j ,  0. -0.5j, -0.5+0.j ,
         0. -0.5j,  0. +0.j ,  0. -0.j ,  0. -0.5j,  0. -0.j , -0. +0.j ,
        -0.5+0.j , -0. +0.j , -0. +0.j , -0.5-0.j ,  0. +0.j ,  0. +0.j ,
        -0. +0.j ,  0. -0.5j,  0. -0.5j,  0. +0.j ,  0. -0.j , -0.5-0.j ,
        -0. +0.5j,  0. +0.j ,  0. -0.5j,  0. +0.j ,  0.5+0.j ,  0. -0.j ],
       [ 0. -0.j , -0. +0.5j,  0.5+0.5j,  0. +0.5j,  0. +0.j ,  0.5+0.j ,
         0.5+0.5j, -0. +0.j ,  0.5+0.j ,  0. -0.5j,  0. -0.5j, -0. +0.5j,
         0. +0.j ,  0. +0.j , -0. +0.j ,  0. -0.j ,  0. +0.j , -0. +0.j ,
         0. +0.j ,  0. +0.j , -0. +0.5j,  0. +0.j ,  0. +0.j , -0. +0.j ,
         0. +0.j ,  0. -0.5j, -0.5+0.j ,  0. +0.j ,  0.5+0.j ,  0. +0.5j,
        -0. +0.j , -0.5-0.j ,  0. -0.5j,  0. -0.j , -0. +0.5j,  0. -0.5j,
        -0.5-0.j ,  0. -0.j ,  0. +0.j ,  0. +0.5j,  0. -0.5j,  0. -0.j ,
         0. +0.j ,  0.5+0.j , -0. +0.j ,  0. -0.5j,  0. +0.j ,  0.5+0.j ],
       [ 0. +0.j ,  0. +0.j ,  0. -0.j , -0. +0.5j, -0.5+0.j , -0. +0.j ,
         0. -0.j ,  0. -0.j ,  0. -0.j ,  0. -0.5j, -0. +0.j ,  0. +0.5j,
        -0.5-0.j ,  0. -0.5j,  0. +0.j ,  0. +0.j , -0.5+0.j , -0. +0.5j,
         0. +0.5j,  0. -0.5j,  0. -0.j , -0. +0.j ,  0. +0.5j,  0.5+0.j ,
        -0. +0.5j,  0. -0.5j, -0.5-0.j ,  0. -0.j , -0. +0.j ,  0. +0.5j,
        -0. +0.j ,  0. +0.j , -0. +0.j ,  0. -0.j , -0. +0.5j,  0. -0.5j,
        -0.5-0.j , -0. +0.5j,  0. +0.j ,  0. -0.j ,  0. -0.5j, -0. +0.j ,
        -0. +0.j ,  0.5+0.j ,  0. -0.j ,  0. -0.5j, -0.5-0.j , -0. +0.j ],
       [ 0. +0.j , -0. +0.5j,  0. -0.j ,  0. +0.j , -0.5-0.j ,  0.5+0.j ,
         0. -0.j ,  0.5+0.j ,  0. -0.j ,  0. -0.5j,  0. -0.5j,  0. +0.j ,
        -0.5+0.j ,  0. +0.j ,  0. +0.j , -0. +0.5j,  0. +0.j ,  0. -0.j ,
         0. -0.j ,  0. +0.j , -0. +0.5j,  0.5+0.j , -0. +0.5j,  0.5+0.j ,
         0. +0.5j,  0. -0.5j,  0. +0.j ,  0. +0.j ,  0. -0.j ,  0. +0.j ,
         0.5+0.j , -0.5-0.j , -0. +0.j ,  0.5+0.j ,  0. +0.5j,  0. +0.j ,
        -0.5-0.j , -0. +0.5j,  0. +0.j ,  0. +0.5j,  0. +0.j ,  0.5+0.j ,
        -0. +0.j ,  0.5+0.j ,  0. +0.j ,  0. -0.5j,  0. +0.j ,  0. -0.j ],
       [ 0. -0.5j,  0. +0.j , -0. +0.j ,  0.5+0.j , -0. +0.5j,  0. -0.j ,
        -0. +0.j , -0. +0.5j, -0. +0.j ,  0. +0.j , -0. +0.j , -0. +0.j ,
         0. +0.5j, -0.5-0.j ,  0. +0.j ,  0.5+0.j ,  0. +0.j ,  0.5+0.j ,
         0.5+0.j ,  0.5+0.j ,  0. +0.j ,  0. +0.5j,  0.5+0.j ,  0. +0.5j,
         0.5+0.j , -0. +0.j ,  0. +0.j , -0.5+0.j , -0. +0.j , -0. +0.j ,
        -0. +0.5j, -0. +0.j , -0. +0.j ,  0. -0.j ,  0. -0.j , -0. +0.j ,
         0. +0.j ,  0. -0.j , -0.5-0.j , -0.5-0.j ,  0. +0.j , -0. +0.5j,
         0.5+0.j ,  0. -0.5j,  0.5+0.j ,  0. +0.j , -0. +0.5j,  0. +0.5j],
       [ 0. +0.j ,  0.5+0.j ,  0.5-0.5j,  0. +0.j ,  0. +0.j , -0. +0.5j,
         0.5-0.5j, -0. +0.j ,  0. -0.5j,  0.5+0.j , -0.5+0.j , -0.5+0.j ,
        -0. +0.j , -0. +0.j , -0. +0.5j,  0. -0.j ,  0. -0.5j,  0. +0.j ,
         0. -0.j ,  0. -0.j ,  0.5+0.j ,  0. -0.j ,  0. +0.j ,  0. +0.j ,
         0. +0.j , -0.5+0.j ,  0. -0.5j,  0. +0.j ,  0. -0.5j, -0.5-0.j ,
         0. +0.j ,  0. +0.5j,  0.5+0.j ,  0. -0.5j, -0.5-0.j , -0.5+0.j ,
         0. -0.5j, -0.5+0.j ,  0. +0.j ,  0. -0.j ,  0.5+0.j ,  0. +0.j ,
         0. -0.j ,  0. -0.j , -0. +0.j ,  0.5+0.j ,  0. +0.j ,  0. -0.j ],
       [ 0. -0.j ,  0. -0.j , -0. +0.j , -0.5-0.j ,  0. -0.5j,  0. +0.j ,
        -0. +0.j , -0. +0.j ,  0. +0.j ,  0.5+0.j ,  0. +0.j , -0.5-0.j ,
         0. -0.5j,  0.5+0.j ,  0. +0.j ,  0. +0.j ,  0. -0.5j, -0.5+0.j ,
        -0.5-0.j , -0.5-0.j ,  0. -0.j , -0. +0.j , -0.5-0.j ,  0. -0.5j,
        -0.5-0.j , -0.5-0.j ,  0. -0.5j,  0. -0.j , -0. +0.j , -0.5+0.j ,
         0. +0.j ,  0. +0.j , -0. +0.j ,  0. +0.j , -0.5+0.j , -0.5+0.j ,
         0. -0.5j, -0.5-0.j ,  0. -0.j , -0. +0.j ,  0.5+0.j , -0. +0.j ,
         0. +0.j , -0. +0.5j,  0. +0.j ,  0.5+0.j ,  0. -0.5j, -0. +0.j ],
       [ 0. +0.j ,  0.5+0.j , -0. +0.j ,  0. +0.j ,  0. -0.5j, -0. +0.5j,
        -0. +0.j ,  0. -0.5j, -0. +0.j ,  0.5+0.j , -0.5+0.j ,  0. +0.j ,
         0. -0.5j, -0. +0.j ,  0. +0.j , -0.5-0.j ,  0. +0.j ,  0. +0.j ,
         0. +0.j ,  0. +0.j ,  0.5+0.j ,  0. -0.5j, -0.5+0.j ,  0. -0.5j,
        -0.5+0.j , -0.5+0.j ,  0. +0.j , -0. +0.j , -0. +0.j ,  0. +0.j ,
         0. -0.5j,  0. +0.5j,  0. -0.j ,  0. -0.5j, -0.5-0.j ,  0. +0.j ,
         0. -0.5j, -0.5-0.j , -0. +0.j ,  0.5+0.j , -0. +0.j ,  0. -0.5j,
         0. +0.j ,  0. +0.5j,  0. +0.j ,  0.5+0.j ,  0. +0.j ,  0. +0.j ]],
      dtype=np.complex64), np.array([[-0. +0.5j,  0. -0.5j,  0. +0.j ,  0. -0.j , -0. +0.j , -0.5+0.j ,
         0. +0.j , -0. +0.j ,  0.5+0.j , -0. +0.5j,  0. +0.j , -0.5+0.5j,
        -0. +0.j , -0. +0.j ,  0.5+0.j ,  0. -0.5j, -0.5-0.5j,  0. +0.5j,
        -0.5-0.5j,  0. +0.j ,  0. +0.j ,  0. +0.j ,  0. -0.j ,  0. +0.j ,
         0. -0.5j,  0. +0.j , -0. +0.5j, -0. +0.5j,  0.5+0.j ,  0. +0.j ,
        -0. +0.5j,  0. +0.j ,  0. -0.5j,  0. -0.j ,  0.5+0.j ,  0. -0.j ,
         0.5+0.j ,  0. -0.5j, -0.5-0.j ,  0.5-0.5j,  0. -0.5j,  0. +0.j ,
        -0.5-0.j , -0.5-0.j , -0.5+0.j ,  0. +0.j ,  0. -0.5j,  0.5+0.j ],
       [-0.5+0.j , -0.5-0.j , -0. +0.j ,  0. +0.j ,  0. +0.j , -0.5-0.j ,
         0. +0.j ,  0. +0.j ,  0. -0.5j,  0. -0.5j,  0. +0.j ,  0.5-0.5j,
         0. +0.j , -0. +0.j ,  0. -0.5j, -0. +0.5j, -0.5+0.5j, -0. +0.5j,
        -0.5-0.5j,  0. +0.j ,  0. +0.j , -0. +0.j , -0. +0.j ,  0. -0.j ,
        -0.5+0.j , -0. +0.j ,  0.5+0.j , -0.5-0.j ,  0. -0.5j,  0. +0.j ,
         0.5+0.j ,  0. +0.j , -0.5+0.j ,  0. +0.j ,  0. +0.5j,  0. +0.j ,
         0.5+0.j , -0.5-0.j , -0.5-0.j , -0.5-0.5j,  0. +0.5j, -0. +0.j ,
         0.5+0.j ,  0. +0.5j,  0. -0.5j,  0. -0.j , -0.5-0.j ,  0. -0.5j],
       [ 0. -0.5j,  0. +0.5j,  0. +0.j ,  0. -0.j ,  0. +0.j ,  0. +0.5j,
        -0. +0.j ,  0. +0.j ,  0. -0.5j,  0.5+0.j , -0. +0.j ,  0.5+0.5j,
        -0. +0.j ,  0. +0.j , -0. +0.5j, -0.5-0.j , -0.5-0.5j,  0.5+0.j ,
        -0.5+0.5j,  0. +0.j ,  0. -0.j ,  0. +0.j , -0. +0.j , -0. +0.j ,
        -0.5-0.j ,  0. -0.j , -0. +0.5j,  0.5+0.j , -0.5+0.j ,  0. +0.j ,
         0. -0.5j, -0. +0.j ,  0. -0.5j,  0. +0.j ,  0. -0.5j,  0. +0.j ,
         0. -0.5j, -0.5+0.j ,  0. -0.5j, -0.5+0.5j, -0.5-0.j ,  0. -0.j ,
         0. -0.5j, -0. +0.5j, -0.5-0.j ,  0. +0.j ,  0. -0.5j,  0. +0.5j],
       [ 0. -0.5j,  0. -0.5j, -0. +0.j ,  0. -0.j ,  0. +0.j ,  0.5+0.j ,
         0. +0.j ,  0. +0.j ,  0. +0.5j, -0. +0.5j,  0. +0.j , -0.5+0.5j,
         0. -0.j , -0. +0.j ,  0. -0.5j,  0. -0.5j,  0.5+0.5j,  0. -0.5j,
         0.5+0.5j,  0. -0.j ,  0. -0.j , -0. +0.j ,  0. +0.j ,  0. +0.j ,
         0.5+0.j , -0. +0.j ,  0. -0.5j,  0.5+0.j ,  0.5+0.j ,  0. -0.j ,
         0. +0.5j,  0. +0.j ,  0. +0.5j,  0. +0.j ,  0. -0.5j, -0. +0.j ,
        -0.5+0.j ,  0.5+0.j , -0.5-0.j ,  0.5-0.5j,  0. -0.5j,  0. +0.j ,
         0.5+0.j ,  0. -0.5j, -0.5-0.j ,  0. +0.j , -0. +0.5j,  0. -0.5j],
       [ 0. -0.5j,  0. -0.j ,  0.5+0.j , -0.5-0.5j,  0. -0.j ,  0.5+0.j ,
         0.5+0.j ,  0. +0.j , -0.5-0.j , -0. +0.j , -0. +0.j ,  0.5-0.5j,
        -0.5+0.j , -0. +0.5j,  0. +0.5j, -0. +0.5j,  0. -0.j ,  0. -0.5j,
         0.5+0.5j, -0. +0.j ,  0.5+0.j , -0. +0.j , -0.5+0.j ,  0. -0.j ,
         0. +0.5j, -0. +0.j , -0. +0.j ,  0. -0.5j, -0.5-0.j ,  0. -0.5j,
        -0. +0.j ,  0. -0.j ,  0. +0.5j, -0.5-0.5j, -0.5+0.j ,  0. +0.j ,
         0. +0.j , -0.5-0.j ,  0. -0.j ,  0. +0.j ,  0. +0.5j, -0. +0.5j,
        -0. +0.j ,  0. -0.5j,  0.5+0.j ,  0. +0.j ,  0. -0.j ,  0. -0.5j],
       [ 0.5+0.j ,  0. -0.j , -0.5-0.j ,  0.5-0.5j,  0. -0.j ,  0.5+0.j ,
         0.5+0.j ,  0. -0.j , -0. +0.5j,  0. +0.j ,  0. -0.j , -0.5+0.5j,
         0.5+0.j , -0.5+0.j , -0.5-0.j ,  0. -0.5j, -0. +0.j ,  0. -0.5j,
         0.5+0.5j,  0. +0.j ,  0. +0.5j,  0. +0.j , -0.5+0.j ,  0. +0.j ,
         0.5+0.j ,  0. +0.j ,  0. +0.j ,  0.5+0.j , -0. +0.5j,  0.5+0.j ,
         0. +0.j ,  0. -0.j ,  0.5+0.j ,  0.5-0.5j,  0. -0.5j,  0. +0.j ,
         0. +0.j ,  0. -0.5j,  0. -0.j ,  0. -0.j ,  0. -0.5j, -0.5-0.j ,
         0. +0.j ,  0.5+0.j ,  0. +0.5j,  0. +0.j ,  0. -0.j ,  0.5+0.j ],
       [ 0. +0.5j,  0. +0.j ,  0. +0.5j, -0.5-0.5j,  0. +0.j ,  0. -0.5j,
        -0. +0.5j,  0. +0.j ,  0. +0.5j,  0. +0.j ,  0. +0.j , -0.5-0.5j,
         0. +0.5j, -0. +0.5j, -0.5+0.j ,  0.5+0.j ,  0. -0.j , -0.5-0.j ,
         0.5-0.5j, -0. +0.j , -0.5+0.j ,  0. -0.j , -0. +0.5j,  0. +0.j ,
         0.5+0.j ,  0. +0.j ,  0. +0.j , -0.5+0.j ,  0.5+0.j ,  0. -0.5j,
         0. +0.j ,  0. +0.j , -0. +0.5j,  0.5+0.5j, -0. +0.5j,  0. -0.j ,
         0. -0.j , -0. +0.5j,  0. +0.j , -0. +0.j ,  0.5+0.j ,  0. -0.5j,
         0. +0.j , -0.5+0.j ,  0.5+0.j ,  0. -0.j ,  0. -0.j ,  0.5+0.j ],
       [-0. +0.5j,  0. +0.j , -0.5-0.j , -0.5-0.5j, -0. +0.j , -0.5+0.j ,
         0.5+0.j ,  0. -0.j ,  0. -0.5j,  0. +0.j ,  0. -0.j ,  0.5-0.5j,
        -0.5+0.j , -0. +0.5j, -0.5-0.j , -0. +0.5j,  0. +0.j , -0. +0.5j,
        -0.5-0.5j,  0. +0.j , -0.5+0.j ,  0. +0.j ,  0.5+0.j , -0. +0.j ,
        -0.5-0.j ,  0. +0.j ,  0. -0.j , -0.5+0.j , -0.5+0.j ,  0. -0.5j,
        -0. +0.j ,  0. -0.j ,  0. -0.5j,  0.5+0.5j, -0. +0.5j,  0. -0.j ,
         0. -0.j ,  0. +0.5j, -0. +0.j ,  0. +0.j , -0. +0.5j,  0. -0.5j,
         0. +0.j , -0.5-0.j ,  0.5+0.j ,  0. -0.j , -0. +0.j ,  0.5+0.j ],
       [ 0. -0.j ,  0. +0.j , -0.5-0.j ,  0.5+0.j ,  0. +0.j , -0.5-0.j ,
         0. +0.j ,  0. +0.j ,  0. -0.5j,  0. -0.j ,  0. -0.j ,  0. +0.5j,
         0.5+0.j ,  0. -0.5j,  0. -0.5j,  0. -0.5j, -0.5+0.j ,  0. -0.j ,
        -0.5+0.j , -0. +0.5j, -0.5-0.j , -0. +0.5j,  0. +0.j , -0.5+0.j ,
         0. -0.5j, -0.5-0.j , -0. +0.5j,  0.5+0.j , -0. +0.j ,  0. -0.j ,
        -0. +0.5j, -0.5-0.j ,  0. -0.5j,  0.5+0.j ,  0.5+0.j ,  0. +0.5j,
         0.5+0.j ,  0. -0.5j, -0.5-0.j ,  0. -0.5j,  0. +0.j ,  0. +0.j ,
         0. +0.j , -0. +0.5j, -0.5-0.j ,  0. +0.j ,  0. +0.j ,  0.5+0.j ],
       [ 0. +0.j ,  0. +0.j ,  0.5+0.j , -0.5-0.j ,  0. -0.j , -0.5-0.j ,
         0. +0.j ,  0. -0.j , -0.5+0.j ,  0. +0.j ,  0. -0.j ,  0. -0.5j,
        -0.5+0.j ,  0.5+0.j ,  0.5+0.j , -0. +0.5j, -0.5-0.j ,  0. -0.j ,
        -0.5+0.j , -0. +0.5j,  0. -0.5j,  0. -0.5j, -0. +0.j ,  0. +0.5j,
        -0.5-0.j ,  0. -0.5j,  0.5+0.j ,  0. +0.5j,  0. +0.j ,  0. +0.j ,
         0.5+0.j , -0.5-0.j , -0.5-0.j , -0.5-0.j , -0. +0.5j,  0. -0.5j,
         0.5+0.j , -0.5+0.j , -0.5-0.j ,  0. -0.5j,  0. -0.j ,  0. -0.j ,
         0. -0.j , -0.5-0.j ,  0. -0.5j,  0. +0.j ,  0. +0.j ,  0. -0.5j],
       [-0. +0.j ,  0. -0.j ,  0. -0.5j,  0.5+0.j ,  0. -0.j ,  0. +0.5j,
         0. +0.j ,  0. +0.j ,  0.5+0.j ,  0. -0.j ,  0. +0.j , -0. +0.5j,
         0. -0.5j,  0. -0.5j,  0.5+0.j , -0.5-0.j , -0.5+0.j ,  0. -0.j ,
        -0.5-0.j , -0.5+0.j ,  0.5+0.j ,  0. -0.5j,  0. +0.j ,  0.5+0.j ,
        -0.5+0.j ,  0.5+0.j , -0. +0.5j, -0. +0.5j,  0. +0.j ,  0. -0.j ,
         0. -0.5j,  0.5+0.j ,  0. -0.5j, -0.5+0.j ,  0. -0.5j, -0.5+0.j ,
         0. -0.5j, -0.5-0.j ,  0. -0.5j,  0. +0.5j,  0. +0.j ,  0. -0.j ,
         0. +0.j ,  0.5+0.j , -0.5+0.j ,  0. -0.j ,  0. +0.j , -0. +0.5j],
       [-0. +0.j , -0. +0.j ,  0.5+0.j , -0. +0.5j,  0. +0.j ,  0.5+0.j ,
         0. +0.j ,  0. -0.j , -0.5-0.j ,  0. +0.j , -0. +0.j , -0.5-0.j ,
         0.5+0.j ,  0. -0.5j,  0.5+0.j ,  0. -0.5j, -0. +0.5j, -0. +0.j ,
        -0. +0.5j,  0. +0.5j,  0.5+0.j ,  0.5+0.j , -0. +0.j , -0.5-0.j ,
         0.5+0.j ,  0.5+0.j ,  0. -0.5j, -0. +0.5j,  0. -0.j ,  0. +0.j ,
        -0. +0.5j,  0. -0.5j,  0. +0.5j,  0. -0.5j,  0. -0.5j,  0. -0.5j,
        -0.5-0.j ,  0.5+0.j , -0.5-0.j ,  0.5+0.j , -0. +0.j ,  0. +0.j ,
         0. -0.j ,  0.5+0.j , -0.5+0.j ,  0. -0.j ,  0. +0.j ,  0. -0.5j],
       [-0. +0.5j,  0. -0.5j,  0. +0.j , -0. +0.5j,  0. -0.5j,  0. +0.j ,
        -0.5-0.j ,  0.5+0.j ,  0.5+0.j , -0. +0.5j, -0.5+0.j , -0.5-0.j ,
         0. +0.j , -0. +0.j ,  0.5+0.j , -0. +0.j ,  0. -0.5j,  0. +0.5j,
         0. -0.5j,  0. +0.j ,  0. +0.j , -0.5+0.j ,  0.5+0.j , -0. +0.j ,
         0.5+0.j , -0. +0.j ,  0. +0.j ,  0. +0.5j,  0.5+0.j ,  0. +0.5j,
         0. +0.j ,  0. -0.5j, -0. +0.j , -0. +0.5j, -0. +0.5j,  0. +0.j ,
         0. +0.j ,  0.5+0.j ,  0. +0.j ,  0.5+0.j ,  0. -0.5j,  0. -0.5j,
        -0.5-0.j , -0.5+0.j ,  0. +0.j ,  0. -0.5j,  0. -0.5j,  0. +0.5j],
       [-0.5+0.j , -0.5+0.j , -0. +0.j ,  0. +0.5j, -0.5-0.j ,  0. +0.j ,
        -0.5+0.j , -0.5-0.j ,  0. -0.5j,  0. -0.5j, -0.5+0.j ,  0.5+0.j ,
         0. +0.j , -0. +0.j ,  0. -0.5j,  0. +0.j ,  0. +0.5j,  0. +0.5j,
         0. -0.5j,  0. +0.j ,  0. +0.j ,  0.5+0.j ,  0.5+0.j ,  0. +0.j ,
         0. -0.5j,  0. -0.j ,  0. -0.j , -0.5+0.j ,  0. -0.5j, -0.5-0.j ,
        -0. +0.j ,  0. -0.5j,  0. +0.j ,  0. +0.5j, -0.5-0.j ,  0. +0.j ,
         0. +0.j , -0. +0.5j,  0. +0.j , -0.5+0.j ,  0. +0.5j,  0.5+0.j ,
         0.5+0.j , -0. +0.5j, -0. +0.j ,  0.5+0.j , -0.5-0.j , -0.5-0.j ],
       [ 0. -0.5j,  0. +0.5j, -0. +0.j , -0. +0.5j,  0. -0.5j,  0. -0.j ,
         0. -0.5j, -0. +0.5j,  0. -0.5j,  0.5+0.j ,  0. -0.5j,  0.5+0.j ,
        -0. +0.j , -0. +0.j , -0. +0.5j,  0. +0.j ,  0. -0.5j,  0.5+0.j ,
         0. +0.5j,  0. -0.j , -0. +0.j , -0.5-0.j ,  0. -0.5j,  0. +0.j ,
         0. +0.5j,  0. +0.j ,  0. +0.j ,  0.5+0.j , -0.5-0.j ,  0. +0.5j,
        -0. +0.j ,  0. -0.5j,  0. +0.j ,  0. -0.5j, -0.5+0.j , -0. +0.j ,
         0. -0.j ,  0. -0.5j, -0. +0.j , -0.5-0.j , -0.5-0.j ,  0. +0.5j,
         0. -0.5j,  0. +0.5j,  0. +0.j ,  0. -0.5j,  0. -0.5j, -0.5-0.j ],
       [ 0. -0.5j,  0. -0.5j,  0. -0.j ,  0.5+0.j ,  0. +0.5j, -0. +0.j ,
        -0.5-0.j , -0.5-0.j , -0. +0.5j,  0. +0.5j, -0.5-0.j ,  0. +0.5j,
         0. +0.j ,  0. +0.j ,  0. -0.5j,  0. +0.j ,  0.5+0.j ,  0. -0.5j,
         0.5+0.j , -0. +0.j , -0. +0.j ,  0. -0.5j, -0.5+0.j ,  0. -0.j ,
         0. -0.5j,  0. +0.j ,  0. +0.j ,  0.5+0.j ,  0.5+0.j , -0. +0.5j,
         0. -0.j , -0.5-0.j ,  0. -0.j , -0.5+0.j , -0.5+0.j ,  0. +0.j ,
         0. -0.j ,  0. -0.5j,  0. -0.j ,  0. -0.5j,  0. -0.5j, -0. +0.5j,
         0.5+0.j ,  0. -0.5j,  0. +0.j ,  0. -0.5j, -0. +0.5j, -0.5-0.j ]],
      dtype=np.complex64))

factor_matrix_U, factor_matrix_V, factor_matrix_W = decomposition_444

# Helper function for Strassen's 2x2 multiplication
def strassen2x2(A, B):
    """
    Multiplies two 2x2 matrices using Strassen's algorithm (7 scalar multiplications).
    Input matrices A and B are 2x2 NumPy arrays.
    """
    if A.shape != (2, 2) or B.shape != (2, 2):
        raise ValueError("Input matrices must be 2x2")

    a11, a12 = A[0, 0], A[0, 1]
    a21, a22 = A[1, 0], A[1, 1]
    b11, b12 = B[0, 0], B[0, 1]
    b21, b22 = B[1, 0], B[1, 1]

    # Strassen's 7 products
    p1 = (a11 + a22) * (b11 + b22)
    p2 = (a21 + a22) * b11
    p3 = a11 * (b12 - b22)
    p4 = a22 * (b21 - b11)
    p5 = (a11 + a12) * b22
    p6 = (a21 - a11) * (b11 + b12)
    p7 = (a12 - a22) * (b21 + b22)

    # Resulting C matrix elements
    c11 = p1 + p4 - p5 + p7
    c12 = p3 + p5
    c21 = p2 + p4
    c22 = p1 - p2 + p3 + p6

    return np.array([[c11, c12], [c21, c22]])

def strassen4x4_recursive(A, B):
    """
    Multiplies two 4x4 matrices by recursively applying Strassen's algorithm.
    This results in 7 * 7 = 49 scalar multiplications.
    """
    if A.shape != (4, 4) or B.shape != (4, 4):
        raise ValueError("Input matrices must be 4x4 for this specific recursive Strassen.")

    A11, A12 = A[0:2, 0:2], A[0:2, 2:4]
    A21, A22 = A[2:4, 0:2], A[2:4, 2:4]
    B11, B12 = B[0:2, 0:2], B[0:2, 2:4]
    B21, B22 = B[2:4, 0:2], B[2:4, 2:4]

    M1 = strassen2x2(A11 + A22, B11 + B22)
    M2 = strassen2x2(A21 + A22, B11)
    M3 = strassen2x2(A11, B12 - B22)
    M4 = strassen2x2(A22, B21 - B11)
    M5 = strassen2x2(A11 + A12, B22)
    M6 = strassen2x2(A21 - A11, B11 + B12)
    M7 = strassen2x2(A12 - A22, B21 + B22)

    # Calculate C sub-matrices
    C11 = M1 + M4 - M5 + M7
    C12 = M3 + M5
    C21 = M2 + M4
    C22 = M1 - M2 + M3 + M6

    # Combine C sub-matrices into the result matrix C
    C = np.block([[C11, C12],
                  [C21, C22]])
    return C

def alphaevolve4x4_matmul(A, B, decomposition):
    n, m, p = 4, 4, 4
    rank = 48 # For decomposition_444

    U, V, W = decomposition

    if A.shape != (n, m) or B.shape != (m, p):
        raise ValueError(f"Input matrix dimensions mismatch. A should be ({n},{m}), B should be ({m},{p})")
    if U.shape != (n * m, rank) or V.shape != (m * p, rank) or W.shape != (p * n, rank):
        raise ValueError("Factor matrix dimensions mismatch.")

    A_c = A.astype(np.complex128)
    B_c = B.astype(np.complex128)

    A_flat = A_c.ravel() 
    B_flat = B_c.ravel() 

    S_A = np.zeros(rank, dtype=np.complex128)
    S_B = np.zeros(rank, dtype=np.complex128)

    for r_idx in range(rank):
        val_a = 0
        for i_idx in range(n): 
            for j_idx in range(m): 
                val_a += U[i_idx * m + j_idx, r_idx] * A_c[i_idx, j_idx]
        S_A[r_idx] = val_a

        val_b = 0
        for j_idx in range(m): 
            for k_idx in range(p): 
                val_b += V[j_idx * p + k_idx, r_idx] * B_c[j_idx, k_idx]
        S_B[r_idx] = val_b

    M = S_A * S_B 

    C_result = np.zeros((n, p), dtype=np.complex128)
    for r_idx in range(rank):
        for i_c in range(n):        
            for k_c in range(p):    
                w_idx = k_c * n + i_c
                C_result[i_c, k_c] += M[r_idx] * W[w_idx, r_idx]
                
    return C_result


# --- Verification ---
print("Verifying 4x4 Matrix Multiplication Algorithms\n")

A_int = np.random.randint(-5, 6, size=(4, 4))
B_int = np.random.randint(-5, 6, size=(4, 4))

print("Matrix A (integer):")
print(A_int)
print("\nMatrix B (integer):")
print(B_int)

C_numpy_int = A_int @ B_int
print("\nResult using NumPy (A @ B):")
print(C_numpy_int)

C_strassen = strassen4x4_recursive(A_int, B_int)
print("\nResult using Strassen's Algorithm (49 multiplications):")
print(C_strassen.astype(A_int.dtype)) 

if np.allclose(C_numpy_int, C_strassen):
    print("Strassen's algorithm matches NumPy result. (Verified for 49 scalar mults)")
else:
    print("Strassen's algorithm DOES NOT match NumPy result.")
    print("Difference:")
    print(C_numpy_int - C_strassen)

print("-" * 50)

A_complex_real = np.random.randint(-2, 3, size=(4, 4))
A_complex_imag = np.random.randint(-2, 3, size=(4, 4))
A_cplx = A_complex_real + 1j * A_complex_imag

B_complex_real = np.random.randint(-2, 3, size=(4, 4))
B_complex_imag = np.random.randint(-2, 3, size=(4, 4))
B_cplx = B_complex_real + 1j * B_complex_imag


print("\nMatrix A (complex):")
print(A_cplx)
print("\nMatrix B (complex):")
print(B_cplx)

C_numpy_cplx = A_cplx @ B_cplx
print("\nResult using NumPy (A @ B) for complex matrices:")
print(C_numpy_cplx)

C_alphaevolve = alphaevolve4x4_matmul(A_cplx, B_cplx, decomposition_444)
print("\nResult using AlphaEvolve's Algorithm (48 multiplications):")
print(C_alphaevolve)

if np.allclose(C_numpy_cplx, C_alphaevolve):
    print("AlphaEvolve's algorithm matches NumPy result. (Verified for 48 scalar mults)")
else:
    print("AlphaEvolve's algorithm DOES NOT match NumPy result.")
    print("Difference:")
    print(C_numpy_cplx - C_alphaevolve)
    
print("\nVerification of Factor Matrices (from original notebook):")


def verify_original_tensor_decomposition(decomposition: tuple[np.ndarray, np.ndarray, np.ndarray], 
                                   n: int, m: int, p: int, rank: int):
  factor_matrix_1, factor_matrix_2, factor_matrix_3 = decomposition
  
  assert factor_matrix_1.shape == (n * m, rank), f'Expected shape of factor matrix 1 is {(n * m, rank)}. Actual shape is {factor_matrix_1.shape}.'
  assert factor_matrix_2.shape == (m * p, rank), f'Expected shape of factor matrix 2 is {(m * p, rank)}. Actual shape is {factor_matrix_2.shape}.'
  assert factor_matrix_3.shape == (p * n, rank), f'Expected shape of factor matrix 3 is {(p * n, rank)}. Actual shape is {factor_matrix_3.shape}.'


  matmul_tensor = np.zeros((n * m, m * p, p * n), dtype=np.complex128) 
  for r_A in range(n): 
    for c_A in range(m): 
      for c_B in range(p): 
        
        idx_A = r_A * m + c_A
        idx_B = c_A * p + c_B 
        idx_C_permuted = c_B * n + r_A 

        matmul_tensor[idx_A, idx_B, idx_C_permuted] = 1

  
  constructed_tensor = np.zeros((n * m, m * p, p * n), dtype=np.complex128)
  U_f, V_f, W_f = decomposition
  for r_val in range(rank):
      outer_prod_cols = np.outer(U_f[:, r_val], V_f[:, r_val]).reshape(n*m, m*p, 1) * W_f[:, r_val].reshape(1, 1, p*n)
      constructed_tensor += outer_prod_cols

  if np.allclose(constructed_tensor, matmul_tensor):
    print(f'Verified original tensor decomposition of rank {rank} for matrix multiplication tensor <{n},{m},{p}>.')
  else:
    print(f'Original tensor decomposition verification FAILED for <{n},{m},{p}>.')


n_orig, m_orig, p_orig = 4, 4, 4
verify_original_tensor_decomposition(decomposition_444, n_orig, m_orig, p_orig, 48)